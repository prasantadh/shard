This file has four major components

a) Tracking context switches to tracked processes

	- We have a "tracked_procs" global variable on the guest. At guest kernel boot time, the SHARD run-time monitor will write the list of tracked procs to this function. It has the following type.

	char tracked_procs[1000];

	The first 100 bytes are reserved for name of first tracked process, the second 100 for second tracked process and so on. Consequently, right now there can be a maximum of 1000 tracked processes

	- Before context switch on the guest, the "set_tracking" function will be called with the name of the next process to run. We will use the tracked_procs function to check if the next process to run is  a tracked process or not. If it is a tracked process, we will set the "currently_running" global variable and cause a UD2 exception to signal the SHARD monitor. If it is not tracked we will unset the "currently_running" variable

b) Tracking system calls.

	- The common entry point for all system calls is "do_entry_syscall64" function. This function is instrumented to call sc_entry with system call id of the next system call to run.
		- First we check if "currently_running" is set or not. If it is not set, we simply return as we do not track system calls on processes that we do not track.
		- Otherwise we cause a UD2 exception to signal the SHARD monitor

c) Tracking interrupts

	- During profiling, all functions that execute between Linux irq_enter and irq_exit functions are treated as interrupts.
	- Consequently, the start of irq_enter is instrumented with a call to log_irq_enter and the end of irq_exit is instrumented with log_irq_exit to signal that we have entered and exit an interrupt


d) Profiling

	- Detailed in the paper